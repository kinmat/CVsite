import { User } from 'src/app/model/user';
import { PersonalInfo } from 'src/app/model/personal-info';
import {
  AlignmentType,
  Document,
  HeadingLevel,
  Packer,
  Paragraph,
  TabStopPosition,
  TabStopType,
  TextRun,
} from 'docx';

export class DocxGenerator {
  // tslint:disable-next-line: typedef
  public create([user, personal, experiences, educations, skills, langs]): Document {
    const document = new Document({
      sections: [
        {
          children: [
            new Paragraph({
              text: `${personal.firstName} ${personal.lastName}`,
              heading: HeadingLevel.TITLE,
            }),
            this.createContactInfo(personal, user),
            this.createHeading('Education'),
            ...educations
              .map((education) => {
                const arr: Paragraph[] = [];
                arr.push(
                  this.createInstitutionHeader(
                    education.org,
                    `${education.from.substring(
                      0,
                      4
                    )} - ${education.to.substring(0, 4)}`
                  )
                );
                arr.push(this.createRoleText(`${education.title}`));

                const bulletPoints = this.splitParagraphIntoBullets(
                  education.description
                );
                bulletPoints.forEach((bulletPoint) => {
                  arr.push(this.createBullet(bulletPoint));
                });

                return arr;
              })
              .reduce((prev, curr) => prev.concat(curr), []),
            this.createHeading('Work Experience'),
            ...experiences
              .map((position) => {
                const arr: Paragraph[] = [];

                arr.push(
                  this.createInstitutionHeader(
                    position.employer,
                    this.createPositionDateText(
                      position.from,
                      position.to,
                      position.ongoing
                    )
                  )
                );
                arr.push(this.createRoleText(position.position));

                const bulletPoints = this.splitParagraphIntoBullets(
                  position.description
                );

                bulletPoints.forEach((bulletPoint) => {
                  arr.push(this.createBullet(bulletPoint));
                });

                return arr;
              })
              .reduce((prev, curr) => prev.concat(curr), []),
            this.createHeading('Skills'),
            this.createSubHeading('Spoken languages'),
            this.createLangList(langs),
            this.createSubHeading('Skills'),
            this.createSkillList(skills),
            new Paragraph('More references upon request'),
            new Paragraph({
              text: 'This CV was generated by CV Site',
              alignment: AlignmentType.CENTER,
            }),
          ],
        },
      ],
    });

    return document;
  }

  public createContactInfo(
    personal: PersonalInfo,
    user: User
  ): Paragraph {
    return new Paragraph({
      alignment: AlignmentType.CENTER,
      children: [
        new TextRun(
          `Email: ${user.email}`
        ),
        new TextRun({
          text: `Address: ${personal.zip}, ${personal.address1} ${personal.address2}`,
          break: 1
        }),
        new TextRun({
          text: `Born on: ${personal.birthdate}`,
          break: 1
        }),
        new TextRun({
          text: `Gender: ${personal.gender}`,
          break: 1
        }),
      ],
    });
  }

  public createHeading(text: string): Paragraph {
    return new Paragraph({
      text: text,
      heading: HeadingLevel.HEADING_1,
      thematicBreak: true,
    });
  }

  public createSubHeading(text: string): Paragraph {
    return new Paragraph({
      text: text,
      heading: HeadingLevel.HEADING_2,
    });
  }

  public createInstitutionHeader(
    institutionName: string,
    dateText: string
  ): Paragraph {
    return new Paragraph({
      tabStops: [
        {
          type: TabStopType.RIGHT,
          position: TabStopPosition.MAX,
        },
      ],
      children: [
        new TextRun({
          text: institutionName,
          bold: true,
        }),
        new TextRun({
          text: `\t${dateText}`,
          bold: true,
        }),
      ],
    });
  }

  public createRoleText(roleText: string): Paragraph {
    return new Paragraph({
      children: [
        new TextRun({
          text: roleText,
          italics: true,
        }),
      ],
    });
  }

  public createBullet(text: string): Paragraph {
    return new Paragraph({
      text: text,
      bullet: {
        level: 0,
      },
    });
  }

  // tslint:disable-next-line:no-any
  public createSkillList(skills: any[]): Paragraph {
    return new Paragraph({
      children: [
        new TextRun(
          skills
            .map((skill) => `${skill.skill}: ${skill.level}/10`)
            .join('\n\n')
        ),
      ],
    });
  }

  public createLangList(langs: any[]): Paragraph {
    return new Paragraph({
      children: [
        new TextRun(
          langs.map((lang) => `${lang.language}: ${lang.level}`).join('\n\n')
        ),
      ],
    });
  }

  // tslint:disable-next-line:no-any
  public createAchivementsList(achivements: any[]): Paragraph[] {
    return achivements.map(
      (achievement) =>
        new Paragraph({
          text: achievement.name,
          bullet: {
            level: 0,
          },
        })
    );
  }

  public createInterests(interests: string): Paragraph {
    return new Paragraph({
      children: [new TextRun(interests)],
    });
  }

  public splitParagraphIntoBullets(text: string): string[] {
    console.log(text);
    if (text) return text.split('\n\n');
    return [];
  }

  // tslint:disable-next-line:no-any
  public createPositionDateText(
    startDate: any,
    endDate: any,
    isCurrent: boolean
  ): string {
    if (startDate && endDate) {
      const startDateText =
        this.getMonthFromInt(Number(startDate.substring(5, 7))) +
        '. ' +
        Number(startDate.substring(0, 4));
      const endDateText = isCurrent
        ? 'Present'
        : `${this.getMonthFromInt(
          Number(startDate.substring(5, 7))
        )}. ${endDate.substring(0, 4)}`;
      return `${startDateText} - ${endDateText}`;
    }
    else return '';
  }

  public getMonthFromInt(value: number): string {
    switch (value) {
      case 1:
        return 'Jan';
      case 2:
        return 'Feb';
      case 3:
        return 'Mar';
      case 4:
        return 'Apr';
      case 5:
        return 'May';
      case 6:
        return 'Jun';
      case 7:
        return 'Jul';
      case 8:
        return 'Aug';
      case 9:
        return 'Sept';
      case 10:
        return 'Oct';
      case 11:
        return 'Nov';
      case 12:
        return 'Dec';
      default:
        return 'N/A';
    }
  }
}
